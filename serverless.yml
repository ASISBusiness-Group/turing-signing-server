tenant: tyvdh
app: turing-signing-server
service: ${opt:service}

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-offline

package:
  individually: true

custom:
  webpack:
    webpackConfig: webpack.config.js
    keepOutputDirectory: true
    includeModules:
      forceInclude:
        - source-map-support
    packager: npm
  serverless-offline:
    useChildProcesses: true
    httpsProtocol: certs
    httpPort: 4000
  serverless-iam-roles-per-function:
    defaultInherit: true

provider:
  name: aws
  environment:
    SERVICE_NAME: ${opt:service}
    PG_DATABASE: ${opt:service}
    AWS_BUCKET_NAME: ${opt:service}
  runtime: nodejs12.x
  region: us-east-1
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: '*'

functions:
  uploadContract:
    handler: src/uploadContract.default
    environment: ${file(env.yml)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:PutObjectTagging
        Resource: arn:aws:s3:::${opt:service}/*
    timeout: 9
    events:
      - http:
          path: contract/{hash}
          method: POST
          cors: true

  updateContract:
    handler: src/updateContract.default
    environment: ${file(env.yml)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:DeleteObjectTagging
          - s3:PutObjectTagging
        Resource: arn:aws:s3:::${opt:service}/*
    timeout: 6
    events:
      - http:
          path: contract/{hash}
          method: PUT
          cors: true

  getContract:
    handler: src/getContract.default
    environment: ${file(env.yml)}
    iamRoleStatements: []
    timeout: 3
    events:
      - http:
          path: contract/{hash}
          method: GET
          cors: true

  runContract:
    handler: src/runContract.default
    environment: ${file(env.yml)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObjectTagging
        Resource: arn:aws:s3:::${opt:service}/*
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: '*'
    timeout: 9
    reservedConcurrency: 9
    events:
      - http:
          path: contract/{hash}/run
          method: POST
          cors: true

  runContractPrivate:
    handler: src/runContractPrivate.default
    iamRoleStatements: []
    # vpc:
    #   securityGroupIds:
    #     - sg-ce7591b7
    #   subnetIds:
    #     - subnet-0a970206
    #     - subnet-1a68ef27
    #     - subnet-3ba56f4d
    #     - subnet-4ba1be60
    #     - subnet-4f03ee17
    #     - subnet-d0422cb5
    timeout: 6
    maximumRetryAttempts: 0
    maximumRecordAgeInSeconds: 0
    memorySize: 128

  checkContractPrivate:
    handler: src/checkContractPrivate.default
    environment: ${file(env.yml)}
    iamRoleStatements: []
    # timeout: 6
    maximumRetryAttempts: 0
    maximumRecordAgeInSeconds: 0
    # memorySize: 128